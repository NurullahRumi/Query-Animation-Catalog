/*Copyright (c) 2016-2017 cmt.mu All Rights Reserved.
 This software is the confidential and proprietary information of cmt.mu You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with cmt.mu*/
package com.mu.cmt.pfs.pfsdb.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.InputStream;
import java.sql.Date;

import javax.servlet.http.HttpServletRequest;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;

import com.mu.cmt.pfs.pfsdb.service.PfsdbProcedureExecutorService;
import com.mu.cmt.pfs.pfsdb.models.procedure.*;

@RestController(value = "Pfsdb.ProcedureExecutionController")
@RequestMapping("/pfsdb/procedureExecutor")
@Api(value = "ProcedureExecutionController", description = "controller class for procedure execution")
public class ProcedureExecutionController {

    private static final Logger LOGGER = LoggerFactory.getLogger(ProcedureExecutionController.class);

    @Autowired
    private PfsdbProcedureExecutorService procedureService;

    @RequestMapping(value = "/procedure/execute/getProcEM1000PK0_ANIM_query_dsgproposaloptions", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "query_dsgproposaloptions")
    public GetProcEm1000pk0AnimQueryDsgproposaloptionsResponse executeGetProcEM1000PK0_ANIM_query_dsgproposaloptions(@RequestParam(value = "pPrgid", required = false) String pprgid, @RequestParam(value = "pDsgproposaloption", required = false) String pdsgproposaloption, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: getProcEM1000PK0_ANIM_query_dsgproposaloptions");
        GetProcEm1000pk0AnimQueryDsgproposaloptionsResponse _result = procedureService.executeGetProcEM1000PK0_ANIM_query_dsgproposaloptions(pprgid, pdsgproposaloption);
        LOGGER.debug("got the result for named procedure: getProcEM1000PK0_ANIM_query_dsgproposaloptions, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/procedure/execute/getProcEM1000PK0_ANIM_ImgForMain", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Image for Animation catalog")
    public Downloadable executeGetProcEM1000PK0_ANIM_ImgForMain(@RequestParam(value = "pTechId", required = false) String ptechId, @RequestParam(value="downloadAsAttachment", defaultValue = "false") boolean downloadAsAttachment, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: getProcEM1000PK0_ANIM_ImgForMain");
        InputStream _result = procedureService.executeGetProcEM1000PK0_ANIM_ImgForMain(ptechId);
        LOGGER.debug("got the result for named procedure: getProcEM1000PK0_ANIM_ImgForMain, result:{}", _result);
        return WMMultipartUtils.buildDownloadResponse(_request, _result, downloadAsAttachment);
    }

    @RequestMapping(value = "/procedure/execute/getProcEM1000PK0_ANIM_PrssCod", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "List of Process code for a Group")
    public GetProcEm1000pk0AnimPrssCodResponse executeGetProcEM1000PK0_ANIM_PrssCod(@RequestParam(value = "pPrgid", required = false) String pprgid, @RequestParam(value = "p_Grp", required = false) String pgrp, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: getProcEM1000PK0_ANIM_PrssCod");
        GetProcEm1000pk0AnimPrssCodResponse _result = procedureService.executeGetProcEM1000PK0_ANIM_PrssCod(pprgid, pgrp);
        LOGGER.debug("got the result for named procedure: getProcEM1000PK0_ANIM_PrssCod, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/procedure/execute/getProcEM1000PK0_ANIM_get_thumbnail", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "get image for QryPatternCodeReferences")
    public Downloadable executeGetProcEM1000PK0_ANIM_get_thumbnail(@RequestParam(value = "pParam1", required = false) String pparam1, @RequestParam(value = "pParam2", required = false) String pparam2, @RequestParam(value="downloadAsAttachment", defaultValue = "false") boolean downloadAsAttachment, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: getProcEM1000PK0_ANIM_get_thumbnail");
        InputStream _result = procedureService.executeGetProcEM1000PK0_ANIM_get_thumbnail(pparam1, pparam2);
        LOGGER.debug("got the result for named procedure: getProcEM1000PK0_ANIM_get_thumbnail, result:{}", _result);
        return WMMultipartUtils.buildDownloadResponse(_request, _result, downloadAsAttachment);
    }

    @RequestMapping(value = "/procedure/execute/getProcEM1000PK0_ANIM_query_orders", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Get the list of orders")
    public GetProcEm1000pk0AnimQueryOrdersResponse executeGetProcEM1000PK0_ANIM_query_orders(@RequestParam(value = "pPrgid", required = false) String pprgid, @RequestParam(value = "pTechcode", required = false) String ptechcode, @RequestParam(value = "pTechseq", required = false) Integer ptechseq, @RequestParam(value = "pOrdnum", required = false) String pordnum, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: getProcEM1000PK0_ANIM_query_orders");
        GetProcEm1000pk0AnimQueryOrdersResponse _result = procedureService.executeGetProcEM1000PK0_ANIM_query_orders(pprgid, ptechcode, ptechseq, pordnum);
        LOGGER.debug("got the result for named procedure: getProcEM1000PK0_ANIM_query_orders, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/procedure/execute/getProcSY2110PK0_get_imagecardForOrder", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "image for Orders")
    public Downloadable executeGetProcSY2110PK0_get_imagecardForOrder(@RequestParam(value = "pPrgid", required = false) String pprgid, @RequestParam(value = "pLibraryCat", required = false) String plibraryCat, @RequestParam(value = "pDocid", required = false) String pdocid, @RequestParam(value="downloadAsAttachment", defaultValue = "false") boolean downloadAsAttachment, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: getProcSY2110PK0_get_imagecardForOrder");
        InputStream _result = procedureService.executeGetProcSY2110PK0_get_imagecardForOrder(pprgid, plibraryCat, pdocid);
        LOGGER.debug("got the result for named procedure: getProcSY2110PK0_get_imagecardForOrder, result:{}", _result);
        return WMMultipartUtils.buildDownloadResponse(_request, _result, downloadAsAttachment);
    }

    @RequestMapping(value = "/procedure/execute/getProcEM1000PK0_ANIM_QryAniCatlg", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Query for Animation catalog")
    public GetProcEm1000pk0AnimQryAniCatlgResponse executeGetProcEM1000PK0_ANIM_QryAniCatlg(@RequestParam(value = "pPrgid", required = false) String pprgid, @RequestParam(value = "pDatefrom", required = false) Date pdatefrom, @RequestParam(value = "pDateto", required = false) Date pdateto, @RequestParam(value = "pTechcode", required = false) String ptechcode, @RequestParam(value = "pReference", required = false) String preference, @RequestParam(value = "pClicod", required = false) String pclicod, @RequestParam(value = "pUsedinorder", required = false) String pusedinorder, @RequestParam(value = "pProcesses", required = false) String pprocesses, @RequestParam(value = "pProposaloption", required = false) String pproposaloption, @RequestParam(value = "pThemes", required = false) String pthemes, @RequestParam(value = "pNoofcoloursfrom", required = false) Integer pnoofcoloursfrom, @RequestParam(value = "pNoofcoloursto", required = false) Integer pnoofcoloursto, @RequestParam(value = "pKeywords", required = false) String pkeywords, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: getProcEM1000PK0_ANIM_QryAniCatlg");
        GetProcEm1000pk0AnimQryAniCatlgResponse _result = procedureService.executeGetProcEM1000PK0_ANIM_QryAniCatlg(pprgid, pdatefrom, pdateto, ptechcode, preference, pclicod, pusedinorder, pprocesses, pproposaloption, pthemes, pnoofcoloursfrom, pnoofcoloursto, pkeywords);
        LOGGER.debug("got the result for named procedure: getProcEM1000PK0_ANIM_QryAniCatlg, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/procedure/execute/getProcEM1000PK0_ANIM_SltGrp", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Select the group name from the drop down")
    public GetProcEm1000pk0AnimSltGrpResponse executeGetProcEM1000PK0_ANIM_SltGrp(@RequestParam(value = "pPrgid", required = false) String pprgid, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: getProcEM1000PK0_ANIM_SltGrp");
        GetProcEm1000pk0AnimSltGrpResponse _result = procedureService.executeGetProcEM1000PK0_ANIM_SltGrp(pprgid);
        LOGGER.debug("got the result for named procedure: getProcEM1000PK0_ANIM_SltGrp, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/procedure/execute/getProcEM1000PK0_ANIM_ImgForPropOpt", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Image for Prop Option")
    public Downloadable executeGetProcEM1000PK0_ANIM_ImgForPropOpt(@RequestParam(value = "pDsgproposaloption", required = false) String pdsgproposaloption, @RequestParam(value="downloadAsAttachment", defaultValue = "false") boolean downloadAsAttachment, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: getProcEM1000PK0_ANIM_ImgForPropOpt");
        InputStream _result = procedureService.executeGetProcEM1000PK0_ANIM_ImgForPropOpt(pdsgproposaloption);
        LOGGER.debug("got the result for named procedure: getProcEM1000PK0_ANIM_ImgForPropOpt, result:{}", _result);
        return WMMultipartUtils.buildDownloadResponse(_request, _result, downloadAsAttachment);
    }

    @RequestMapping(value = "/procedure/execute/getProcEM1000PK0_ANIM_Requestnos", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "List of request no")
    public GetProcEm1000pk0AnimRequestnosResponse executeGetProcEM1000PK0_ANIM_Requestnos(@RequestParam(value = "pPrgid", required = false) String pprgid, @RequestParam(value = "pTechcode", required = false) String ptechcode, @RequestParam(value = "pTechseq", required = false) Integer ptechseq, @RequestParam(value = "pRequestno", required = false) String prequestno, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: getProcEM1000PK0_ANIM_Requestnos");
        GetProcEm1000pk0AnimRequestnosResponse _result = procedureService.executeGetProcEM1000PK0_ANIM_Requestnos(pprgid, ptechcode, ptechseq, prequestno);
        LOGGER.debug("got the result for named procedure: getProcEM1000PK0_ANIM_Requestnos, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/procedure/execute/getProcEM1000PK0_ANIM_animcode_usage", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Get Pattern code references")
    public GetProcEm1000pk0AnimAnimcodeUsageResponse executeGetProcEM1000PK0_ANIM_animcode_usage(@RequestParam(value = "pPrgid", required = false) String pprgid, @RequestParam(value = "pTechcode", required = false) String ptechcode, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: getProcEM1000PK0_ANIM_animcode_usage");
        GetProcEm1000pk0AnimAnimcodeUsageResponse _result = procedureService.executeGetProcEM1000PK0_ANIM_animcode_usage(pprgid, ptechcode);
        LOGGER.debug("got the result for named procedure: getProcEM1000PK0_ANIM_animcode_usage, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/procedure/execute/getProcSY2110PK0_get_imagecardForPropOpt", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Image for Proposal Option")
    public Downloadable executeGetProcSY2110PK0_get_imagecardForPropOpt(@RequestParam(value = "pPrgid", required = false) String pprgid, @RequestParam(value = "pLibraryCat", required = false) String plibraryCat, @RequestParam(value = "pDocid", required = false) String pdocid, @RequestParam(value="downloadAsAttachment", defaultValue = "false") boolean downloadAsAttachment, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: getProcSY2110PK0_get_imagecardForPropOpt");
        InputStream _result = procedureService.executeGetProcSY2110PK0_get_imagecardForPropOpt(pprgid, plibraryCat, pdocid);
        LOGGER.debug("got the result for named procedure: getProcSY2110PK0_get_imagecardForPropOpt, result:{}", _result);
        return WMMultipartUtils.buildDownloadResponse(_request, _result, downloadAsAttachment);
    }

    @RequestMapping(value = "/procedure/execute/getProcSY2110PK0_get_ImagecardForSample", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Get image for sample")
    public Downloadable executeGetProcSY2110PK0_get_ImagecardForSample(@RequestParam(value = "pPrgid", required = false) String pprgid, @RequestParam(value = "pLibraryCat", required = false) String plibraryCat, @RequestParam(value = "pDocid", required = false) String pdocid, @RequestParam(value="downloadAsAttachment", defaultValue = "false") boolean downloadAsAttachment, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: getProcSY2110PK0_get_ImagecardForSample");
        InputStream _result = procedureService.executeGetProcSY2110PK0_get_ImagecardForSample(pprgid, plibraryCat, pdocid);
        LOGGER.debug("got the result for named procedure: getProcSY2110PK0_get_ImagecardForSample, result:{}", _result);
        return WMMultipartUtils.buildDownloadResponse(_request, _result, downloadAsAttachment);
    }

    @RequestMapping(value = "/procedure/execute/getProcEM1000PK0_ANIM_SltTheme", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "List of value of the theme for the group")
    public GetProcEm1000pk0AnimSltThemeResponse executeGetProcEM1000PK0_ANIM_SltTheme(@RequestParam(value = "pPrgid", required = false) String pprgid, @RequestParam(value = "pGrp", required = false) String pgrp, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: getProcEM1000PK0_ANIM_SltTheme");
        GetProcEm1000pk0AnimSltThemeResponse _result = procedureService.executeGetProcEM1000PK0_ANIM_SltTheme(pprgid, pgrp);
        LOGGER.debug("got the result for named procedure: getProcEM1000PK0_ANIM_SltTheme, result:{}", _result);
        return _result;
    }

}