/*Copyright (c) 2016-2017 cmt.mu All Rights Reserved.
 This software is the confidential and proprietary information of cmt.mu You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with cmt.mu*/
package com.mu.cmt.pfs.pfsdb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.sql.Date;
import java.util.HashMap;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.procedure.WMProcedureExecutor;
import com.wavemaker.runtime.data.exception.BlobContentNotFoundException;

import com.mu.cmt.pfs.pfsdb.models.procedure.*;

@Service
public class PfsdbProcedureExecutorServiceImpl implements PfsdbProcedureExecutorService {

    private static final Logger LOGGER = LoggerFactory.getLogger(PfsdbProcedureExecutorServiceImpl.class);

    @Autowired
    @Qualifier("pfsdbWMProcedureExecutor")
    private WMProcedureExecutor procedureExecutor;

    @Transactional(value = "pfsdbTransactionManager")
    @Override
    public GetProcEm1000pk0AnimQueryDsgproposaloptionsResponse executeGetProcEM1000PK0_ANIM_query_dsgproposaloptions(String pprgid, String pdsgproposaloption) {
        Map<String, Object> params = new HashMap<>(3);

        params.put("pPrgid", pprgid);
        params.put("pDsgproposaloption", pdsgproposaloption);

        return procedureExecutor.executeNamedProcedure("getProcEM1000PK0_ANIM_query_dsgproposaloptions", params, GetProcEm1000pk0AnimQueryDsgproposaloptionsResponse.class);
    }

    @Transactional(value = "pfsdbTransactionManager")
    @Override
    public InputStream executeGetProcEM1000PK0_ANIM_ImgForMain(String ptechId) {
        Map<String, Object> params = new HashMap<>(2);

        params.put("pTechId", ptechId);

        GetProcEm1000pk0AnimImgForMainResponse _result =  procedureExecutor.executeNamedProcedure("getProcEM1000PK0_ANIM_ImgForMain", params, GetProcEm1000pk0AnimImgForMainResponse.class);
        if(_result.getPoutImg() == null) {
            LOGGER.debug("Blob content not exists for poutImg in procedure getProcEM1000PK0_ANIM_ImgForMain");
            throw new BlobContentNotFoundException("Blob content not found for poutImg in procedure getProcEM1000PK0_ANIM_ImgForMain");
        }
        return new ByteArrayInputStream(_result.getPoutImg());
    }

    @Transactional(value = "pfsdbTransactionManager")
    @Override
    public GetProcEm1000pk0AnimPrssCodResponse executeGetProcEM1000PK0_ANIM_PrssCod(String pprgid, String pgrp) {
        Map<String, Object> params = new HashMap<>(3);

        params.put("pPrgid", pprgid);
        params.put("p_Grp", pgrp);

        return procedureExecutor.executeNamedProcedure("getProcEM1000PK0_ANIM_PrssCod", params, GetProcEm1000pk0AnimPrssCodResponse.class);
    }

    @Transactional(value = "pfsdbTransactionManager")
    @Override
    public InputStream executeGetProcEM1000PK0_ANIM_get_thumbnail(String pparam1, String pparam2) {
        Map<String, Object> params = new HashMap<>(3);

        params.put("pParam1", pparam1);
        params.put("pParam2", pparam2);

        GetProcEm1000pk0AnimGetThumbnailResponse _result =  procedureExecutor.executeNamedProcedure("getProcEM1000PK0_ANIM_get_thumbnail", params, GetProcEm1000pk0AnimGetThumbnailResponse.class);
        if(_result.getPoutImg() == null) {
            LOGGER.debug("Blob content not exists for poutImg in procedure getProcEM1000PK0_ANIM_get_thumbnail");
            throw new BlobContentNotFoundException("Blob content not found for poutImg in procedure getProcEM1000PK0_ANIM_get_thumbnail");
        }
        return new ByteArrayInputStream(_result.getPoutImg());
    }

    @Transactional(value = "pfsdbTransactionManager")
    @Override
    public GetProcEm1000pk0AnimQueryOrdersResponse executeGetProcEM1000PK0_ANIM_query_orders(String pprgid, String ptechcode, Integer ptechseq, String pordnum) {
        Map<String, Object> params = new HashMap<>(5);

        params.put("pPrgid", pprgid);
        params.put("pTechcode", ptechcode);
        params.put("pTechseq", ptechseq);
        params.put("pOrdnum", pordnum);

        return procedureExecutor.executeNamedProcedure("getProcEM1000PK0_ANIM_query_orders", params, GetProcEm1000pk0AnimQueryOrdersResponse.class);
    }

    @Transactional(value = "pfsdbTransactionManager")
    @Override
    public InputStream executeGetProcSY2110PK0_get_imagecardForOrder(String pprgid, String plibraryCat, String pdocid) {
        Map<String, Object> params = new HashMap<>(4);

        params.put("pPrgid", pprgid);
        params.put("pLibraryCat", plibraryCat);
        params.put("pDocid", pdocid);

        GetProcSy2110pk0GetImagecardForOrderResponse _result =  procedureExecutor.executeNamedProcedure("getProcSY2110PK0_get_imagecardForOrder", params, GetProcSy2110pk0GetImagecardForOrderResponse.class);
        if(_result.getPoutDoc() == null) {
            LOGGER.debug("Blob content not exists for poutDoc in procedure getProcSY2110PK0_get_imagecardForOrder");
            throw new BlobContentNotFoundException("Blob content not found for poutDoc in procedure getProcSY2110PK0_get_imagecardForOrder");
        }
        return new ByteArrayInputStream(_result.getPoutDoc());
    }

    @Transactional(value = "pfsdbTransactionManager")
    @Override
    public GetProcEm1000pk0AnimQryAniCatlgResponse executeGetProcEM1000PK0_ANIM_QryAniCatlg(String pprgid, Date pdatefrom, Date pdateto, String ptechcode, String preference, String pclicod, String pusedinorder, String pprocesses, String pproposaloption, String pthemes, Integer pnoofcoloursfrom, Integer pnoofcoloursto, String pkeywords) {
        Map<String, Object> params = new HashMap<>(14);

        params.put("pPrgid", pprgid);
        params.put("pDatefrom", pdatefrom);
        params.put("pDateto", pdateto);
        params.put("pTechcode", ptechcode);
        params.put("pReference", preference);
        params.put("pClicod", pclicod);
        params.put("pUsedinorder", pusedinorder);
        params.put("pProcesses", pprocesses);
        params.put("pProposaloption", pproposaloption);
        params.put("pThemes", pthemes);
        params.put("pNoofcoloursfrom", pnoofcoloursfrom);
        params.put("pNoofcoloursto", pnoofcoloursto);
        params.put("pKeywords", pkeywords);

        return procedureExecutor.executeNamedProcedure("getProcEM1000PK0_ANIM_QryAniCatlg", params, GetProcEm1000pk0AnimQryAniCatlgResponse.class);
    }

    @Transactional(value = "pfsdbTransactionManager")
    @Override
    public GetProcEm1000pk0AnimSltGrpResponse executeGetProcEM1000PK0_ANIM_SltGrp(String pprgid) {
        Map<String, Object> params = new HashMap<>(2);

        params.put("pPrgid", pprgid);

        return procedureExecutor.executeNamedProcedure("getProcEM1000PK0_ANIM_SltGrp", params, GetProcEm1000pk0AnimSltGrpResponse.class);
    }

    @Transactional(value = "pfsdbTransactionManager")
    @Override
    public InputStream executeGetProcEM1000PK0_ANIM_ImgForPropOpt(String pdsgproposaloption) {
        Map<String, Object> params = new HashMap<>(2);

        params.put("pDsgproposaloption", pdsgproposaloption);

        GetProcEm1000pk0AnimImgForPropOptResponse _result =  procedureExecutor.executeNamedProcedure("getProcEM1000PK0_ANIM_ImgForPropOpt", params, GetProcEm1000pk0AnimImgForPropOptResponse.class);
        if(_result.getPoutImg() == null) {
            LOGGER.debug("Blob content not exists for poutImg in procedure getProcEM1000PK0_ANIM_ImgForPropOpt");
            throw new BlobContentNotFoundException("Blob content not found for poutImg in procedure getProcEM1000PK0_ANIM_ImgForPropOpt");
        }
        return new ByteArrayInputStream(_result.getPoutImg());
    }

    @Transactional(value = "pfsdbTransactionManager")
    @Override
    public GetProcEm1000pk0AnimRequestnosResponse executeGetProcEM1000PK0_ANIM_Requestnos(String pprgid, String ptechcode, Integer ptechseq, String prequestno) {
        Map<String, Object> params = new HashMap<>(5);

        params.put("pPrgid", pprgid);
        params.put("pTechcode", ptechcode);
        params.put("pTechseq", ptechseq);
        params.put("pRequestno", prequestno);

        return procedureExecutor.executeNamedProcedure("getProcEM1000PK0_ANIM_Requestnos", params, GetProcEm1000pk0AnimRequestnosResponse.class);
    }

    @Transactional(value = "pfsdbTransactionManager")
    @Override
    public GetProcEm1000pk0AnimAnimcodeUsageResponse executeGetProcEM1000PK0_ANIM_animcode_usage(String pprgid, String ptechcode) {
        Map<String, Object> params = new HashMap<>(3);

        params.put("pPrgid", pprgid);
        params.put("pTechcode", ptechcode);

        return procedureExecutor.executeNamedProcedure("getProcEM1000PK0_ANIM_animcode_usage", params, GetProcEm1000pk0AnimAnimcodeUsageResponse.class);
    }

    @Transactional(value = "pfsdbTransactionManager")
    @Override
    public InputStream executeGetProcSY2110PK0_get_imagecardForPropOpt(String pprgid, String plibraryCat, String pdocid) {
        Map<String, Object> params = new HashMap<>(4);

        params.put("pPrgid", pprgid);
        params.put("pLibraryCat", plibraryCat);
        params.put("pDocid", pdocid);

        GetProcSy2110pk0GetImagecardForPropOptResponse _result =  procedureExecutor.executeNamedProcedure("getProcSY2110PK0_get_imagecardForPropOpt", params, GetProcSy2110pk0GetImagecardForPropOptResponse.class);
        if(_result.getPoutDoc() == null) {
            LOGGER.debug("Blob content not exists for poutDoc in procedure getProcSY2110PK0_get_imagecardForPropOpt");
            throw new BlobContentNotFoundException("Blob content not found for poutDoc in procedure getProcSY2110PK0_get_imagecardForPropOpt");
        }
        return new ByteArrayInputStream(_result.getPoutDoc());
    }

    @Transactional(value = "pfsdbTransactionManager")
    @Override
    public InputStream executeGetProcSY2110PK0_get_ImagecardForSample(String pprgid, String plibraryCat, String pdocid) {
        Map<String, Object> params = new HashMap<>(4);

        params.put("pPrgid", pprgid);
        params.put("pLibraryCat", plibraryCat);
        params.put("pDocid", pdocid);

        GetProcSy2110pk0GetImagecardForSampleResponse _result =  procedureExecutor.executeNamedProcedure("getProcSY2110PK0_get_ImagecardForSample", params, GetProcSy2110pk0GetImagecardForSampleResponse.class);
        if(_result.getPoutDoc() == null) {
            LOGGER.debug("Blob content not exists for poutDoc in procedure getProcSY2110PK0_get_ImagecardForSample");
            throw new BlobContentNotFoundException("Blob content not found for poutDoc in procedure getProcSY2110PK0_get_ImagecardForSample");
        }
        return new ByteArrayInputStream(_result.getPoutDoc());
    }

    @Transactional(value = "pfsdbTransactionManager")
    @Override
    public GetProcEm1000pk0AnimSltThemeResponse executeGetProcEM1000PK0_ANIM_SltTheme(String pprgid, String pgrp) {
        Map<String, Object> params = new HashMap<>(3);

        params.put("pPrgid", pprgid);
        params.put("pGrp", pgrp);

        return procedureExecutor.executeNamedProcedure("getProcEM1000PK0_ANIM_SltTheme", params, GetProcEm1000pk0AnimSltThemeResponse.class);
    }

}